// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "typedSql"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Character {
  id                   Int                      @id @default(autoincrement())
  ocid                 String
  updatedAt            DateTime
  nickname             String                   @unique
  worldName            String?
  gender               String?
  class                String?
  classLevel           String?
  level                Int?
  exp                  BigInt?
  expRate              Float?
  guildName            String?
  imageUrl             String?                  @db.VarChar(299) // URL의 코드부분만 저장
  dateCreate           DateTime?
  accessFlag           Boolean?
  liberationQuestClear Boolean?
  popularity           Int?
  stat                 Stat?                    @relation(fields: [statId], references: [id])
  statId               Int?                     @unique
  hyperStatPreset      CharacterHyperStat[]
  propensity           Propensity?              @relation(fields: [propensityId], references: [id])
  propensityId         Int?                     @unique
  abilityPreset        CharacterAbility[]
  itemEquipmentPreset  CharacterItemEquipment[]
  cashEquipmentPreset  CharacterCashEquipment[]
  symbol               Symbol[]
  setEffect            CharacterSetEffect[]
  petEquipment         PetEquipment[]
  union                Union?                   @relation(fields: [unionId], references: [id])
  unionId              Int?                     @unique
  skill                CharacterSkill[]
  skillCore            CharacterSkillCore[]
  linkSkill            CharacterLinkSkill[]
}

model Stat {
  id                             Int        @id @default(autoincrement())
  maxStatAttackPower             Int? // 최대 스탯공격력
  minStatAttackPower             Int? // 최소 스탯공격력
  damage                         Float? // 데미지
  bossMonsterDamage              Float? // 보스 몬스터 데미지
  finalDamage                    Float? // 최종 데미지
  ignoreDefenseRate              Float? // 방어율 무시
  criticalRate                   Int? // 크리티컬 확률
  criticalDamage                 Float? // 크리티컬 데미지
  abnormalStatusResistance       Int? // 상태이상 내성
  stance                         Int? // 스탠스
  defense                        Int? // 방어력
  moveSpeed                      Int? // 이동속도
  jumpPower                      Int? // 점프력
  starForce                      Int? // 스타포스
  arcaneForce                    Int? // 아케인포스
  authenticForce                 Int? // 어센틱포스
  str                            Int? // STR
  dex                            Int? // DEX
  int                            Int? // INT
  luk                            Int? // LUK
  hp                             Int? // HP
  mp                             Int? // MP
  apStr                          Int? // AP 배분 STR
  apDex                          Int? // AP 배분 DEX
  apInt                          Int? // AP 배분 INT
  apLuk                          Int? // AP 배분 LUK
  apHp                           Int? // AP 배분 HP
  apMp                           Int? // AP 배분 MP
  itemDropRate                   Int? // 아이템 드롭률
  mesoAcquisition                Int? // 메소 획득량
  buffDuration                   Int? // 버프 지속시간
  attackSpeed                    Int? // 공격 속도
  normalMonsterDamage            Float? // 일반 몬스터 데미지
  cooldownReductionPercent       Int? // 재사용 대기시간 감소 (%)
  cooldownReductionSeconds       Int? // 재사용 대기시간 감소 (초)
  cooldownExemption              Int? // 재사용 대기시간 미적용
  ignoreAttributeResistance      Float? // 속성 내성 무시
  abnormalStatusAdditionalDamage Float? // 상태이상 추가 데미지
  weaponMastery                  Int? // 무기 숙련도
  additionalExp                  Float? // 추가 경험치 획득
  attackPower                    Int? // 공격력
  magicPower                     Int? // 마력
  combatPower                    Int? // 전투력
  summonDurationIncrease         Int? // 소환수 지속시간 증가
  remainAp                       Int? // 남은 AP 포인트
  Character                      Character? // 재사용 가능성 매우 낮다고 판단해서 1:1
}

model CharacterHyperStat {
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  hyperStat   HyperStat @relation(fields: [hyperStatId], references: [id])
  hyperStatId Int
  presetNo    Int
  active      Boolean

  @@id([characterId, presetNo, hyperStatId])
}

model HyperStat {
  id           Int                  @id @default(autoincrement())
  statType     String // remainPoint 이름은 여기에
  statLevel    Int?
  statPoint    Int // remainPoint 값은 여기에
  statIncrease String?
  character    CharacterHyperStat[]

  @@unique([statType, statPoint])
}

model Propensity {
  id               Int        @id @default(autoincrement())
  charismaLevel    Int
  sensibilityLevel Int
  insightLevel     Int
  willingnessLevel Int
  handicraftLevel  Int
  charmLevel       Int
  character        Character?
}

model CharacterAbility {
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  ability     Ability?  @relation(fields: [abilityId], references: [id])
  abilityId   Int?
  abilityNo   Int // 어빌리티 몇번째 슬롯인지
  presetNo    Int // 프리셋 미지정 캐릭터는 강제 1 매핑, 프리셋 0의 abilityNo는 remainFame
  active      Boolean

  @@id([characterId, presetNo, abilityNo])
}

model Ability {
  id           Int                @id @default(autoincrement())
  abilityGrade AbilityGrade
  abilityValue String             @unique
  character    CharacterAbility[]
}

enum AbilityGrade {
  RARE
  EPIC
  UNIQUE
  LEGENDARY
}

model CharacterItemEquipment {
  character       Character     @relation(fields: [characterId], references: [id])
  characterId     Int
  itemEquipment   ItemEquipment @relation(fields: [itemEquipmentId], references: [id])
  itemEquipmentId Int
  presetNo        Int
  active          Boolean

  @@id([characterId, presetNo, itemEquipmentId])
}

model ItemEquipment {
  id                             Int             @id @default(autoincrement())
  hash                           String          @unique
  part                           String
  slot                           String
  name                           String
  icon                           String
  description                    String?         @db.VarChar(500)
  shapeName                      String?
  shapeIcon                      String?
  gender                         String?
  potentialOptionGrade           PotentialGrade?
  additionalPotentialOptionGrade PotentialGrade?
  equipmentLevelIncrease         Int?
  growthExp                      Int?
  growthLevel                    Int?
  scrollUpgrade                  Int? // 작
  cuttableCount                  Int?
  goldenHammerFlag               Boolean? // 황망 유무
  scrollResilienceCount          Int?
  scrollUpgradeableCount         Int?
  soulName                       String? // 무기
  soulOption                     String? // 무기
  starforce                      Int?
  starforceScrollFlag            Boolean? // 놀장 여부
  specialRingLevel               Int? // 시드링 레벨
  dateExpire                     DateTime?
  dateOptionExpire               DateTime? // 훈장 옵션 만료일

  character              CharacterItemEquipment[]
  ItemEquipmentOption    ItemEquipmentOption[]
  ItemEquipmentPotential ItemEquipmentPotential[]
}

enum PotentialGrade {
  RARE
  EPIC
  UNIQUE
  LEGENDARY
}

model ItemEquipmentPotential {
  id          Int           @id @default(autoincrement())
  equipment   ItemEquipment @relation(fields: [equipmentId], references: [id])
  equipmentId Int
  potential   Potential     @relation(fields: [potentialId], references: [id])
  potentialId Int
  potentialNo Int // potential: 0, 1, 2 | additionalPotential: 3, 4, 5

  @@unique([equipmentId, potentialId, potentialNo])
}

model Potential {
  id                     Int                      @id @default(autoincrement())
  potential              String                   @unique
  ItemEquipmentPotential ItemEquipmentPotential[]
}

model ItemEquipmentOption {
  id              Int           @id @default(autoincrement())
  itemEquipment   ItemEquipment @relation(fields: [itemEquipmentId], references: [id])
  itemEquipmentId Int
  option          ItemOption    @relation(fields: [optionId], references: [id])
  optionId        Int
  optionType      OptionType

  @@unique([itemEquipmentId, optionType, optionId])
}

enum OptionType {
  TOTAL // 합산
  BASE // 기본
  EXCEPTIONAL // 익셉셔널
  ADD // 추옵
  ETC // 작
  STARFORCE // 스타포스
}

model ItemOption {
  id                     Int                      @id @default(autoincrement())
  hash                   String                   @unique
  str                    Int?
  dex                    Int?
  int                    Int?
  luk                    Int?
  maxHp                  Int?
  maxMp                  Int?
  attackPower            Int?
  magicPower             Int?
  armor                  Int?
  speed                  Int?
  jump                   Int?
  bossDamage             Int?
  ignoreMonsterArmor     Int?
  allStat                Int?
  damage                 Int?
  equipmentLevelDecrease Int?
  maxHpRate              Int?
  maxMpRate              Int?
  baseEquipmentLevel     Int?
  exceptionalUpgrade     Int?
  ItemEquipmentOption    ItemEquipmentOption[]
  CharacterCashEquipment CharacterCashEquipment[]
}

model CharacterCashEquipment {
  characterId             Int
  character               Character       @relation(fields: [characterId], references: [id])
  cashEquipmentId         Int
  cashEquipment           CashEquipment   @relation(fields: [cashEquipmentId], references: [id])
  optionId                Int?
  option                  ItemOption?     @relation(fields: [optionId], references: [id])
  dateExpire              DateTime?
  dateOptionExpire        DateTime?
  coloringPrismRange      PrismRangeType?
  coloringPrismHue        Int?
  coloringPrismSaturation Int?
  coloringPrismValue      Int?
  presetNo                Int // 베이스 0, 외형 1, 2, 3, 제로-베타 엔버-드레스업 베이스 4, 외형 5, 6, 7
  active                  Boolean

  @@id([characterId, presetNo, cashEquipmentId])
}

enum PrismRangeType {
  ALL
  RED
  YELLOW
  GREEN
  CYAN
  BLUE
  PURPLE
}

model CashEquipment {
  id                     Int                      @id @default(autoincrement())
  part                   String
  slot                   String
  name                   String
  icon                   String                   @unique
  description            String?                  @db.VarChar(500)
  label                  String?
  itemGender             String?
  characterCashEquipment CharacterCashEquipment[]
}

model Symbol {
  characterId        Int
  character          Character @relation(fields: [characterId], references: [id])
  name               String
  force              Int
  level              Int
  str                Int
  dex                Int
  int                Int
  luk                Int
  hp                 Int
  dropRate           Int
  mesoRate           Int
  expRate            Int
  growthCount        Int
  requireGrowthCount Int

  @@id([characterId, name])
}

model CharacterSetEffect {
  characterId Int
  character   Character @relation(fields: [characterId], references: [id])
  setEffectId Int
  setEffect   SetEffect @relation(fields: [setEffectId], references: [id])
  setCount    Int

  @@id([characterId, setEffectId])
}

model SetEffect {
  id                 Int                  @id @default(autoincrement())
  setName            String
  hash               String
  setOptionList      Json // 세트옵션 자체가 텍스트인 관계로 모든 세트옵션을 JSON으로 저장
  CharacterSetEffect CharacterSetEffect[]
}

model PetEquipment {
  id                Int       @id @default(autoincrement())
  characterId       Int
  character         Character @relation(fields: [characterId], references: [id])
  petName           String
  petNickname       String
  petIcon           String
  petDescription    String
  itemName          String?
  itemIcon          String?
  itemDescription   String?
  attackPower       Int?
  magicPower        Int?
  scrollUpgrade     Int?
  scrollUpgradable  Int?
  itemShape         String?
  itemShapeIcon     String?
  autoSkill1        String?
  autoSkill1Icon    String?
  autoSkill2        String?
  autoSkill2Icon    String?
  petSkills         Json?
  petType           String?
  petDateExpire     DateTime?
  petAppearance     String?
  petAppearanceIcon String?
  petNo             Int
}

model Union {
  id                 Int        @id @default(autoincrement())
  character          Character?
  unionLevel         Int
  unionArtifactLevel Int
  unionArtifactExp   Int
  unionArtifactPoint Int
}

model CharacterSkill {
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  skill       Skill     @relation(fields: [skillId], references: [id])
  skillId     Int

  @@id([characterId, skillId])
}

model CharacterLinkSkill {
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  skill       Skill     @relation(fields: [skillId], references: [id])
  skillId     Int
  presetNo    Int // 링크스킬은 항상 0번이 적용중 1, 2, 3 은 프리셋
  ownedSkill  Boolean

  @@id([characterId, presetNo, skillId])
}

model Skill {
  id                 Int                  @id @default(autoincrement())
  hash               String               @unique
  grade              String? // 스킬 차수
  name               String
  description        String?              @db.VarChar(500)
  level              Int
  icon               String
  effect             String?              @db.VarChar(500)
  effectNext         String?              @db.VarChar(500)
  characters         CharacterSkill[]
  CharacterLinkSkill CharacterLinkSkill[]
}

model CharacterSkillCore {
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  skillCore   SkillCore @relation(fields: [skillCoreId], references: [id])
  skillCoreId Int
  slotId      Int?
  slotLevel   Int?
  coreLevel   Int

  @@id([characterId, skillCoreId])
}

model SkillCore {
  id         Int                  @id @default(autoincrement())
  hash       String
  grade      Int
  coreName   String
  coreType   String
  coreSkill  Json
  characters CharacterSkillCore[]
}
